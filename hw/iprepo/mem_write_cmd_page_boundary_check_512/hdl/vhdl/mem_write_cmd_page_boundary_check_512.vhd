-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_write_cmd_page_boundary_check_512 is
port (
    s_axis_cmd_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    m_axis_cmd_V_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    regBaseVaddr_V : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_cmd_V_TVALID : IN STD_LOGIC;
    s_axis_cmd_V_TREADY : OUT STD_LOGIC;
    m_axis_cmd_V_TVALID : OUT STD_LOGIC;
    m_axis_cmd_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mem_write_cmd_page_boundary_check_512 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mem_write_cmd_page_boundary_check_512,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.435312,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=588,HLS_SYN_LUT=822,HLS_VERSION=2020_1}";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_ap_start : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_ap_done : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_ap_continue : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_ap_idle : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_ap_ready : STD_LOGIC;
    signal mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write : STD_LOGIC;
    signal calculate_page_offse_U0_ap_start : STD_LOGIC;
    signal calculate_page_offse_U0_ap_done : STD_LOGIC;
    signal calculate_page_offse_U0_ap_continue : STD_LOGIC;
    signal calculate_page_offse_U0_ap_idle : STD_LOGIC;
    signal calculate_page_offse_U0_ap_ready : STD_LOGIC;
    signal calculate_page_offse_U0_cmdIn_V_TREADY : STD_LOGIC;
    signal calculate_page_offse_U0_regBaseVaddr_V_read : STD_LOGIC;
    signal calculate_page_offse_U0_pageOffsetFifo_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal calculate_page_offse_U0_pageOffsetFifo_V_write : STD_LOGIC;
    signal boundary_check_U0_ap_start : STD_LOGIC;
    signal boundary_check_U0_ap_done : STD_LOGIC;
    signal boundary_check_U0_ap_continue : STD_LOGIC;
    signal boundary_check_U0_ap_idle : STD_LOGIC;
    signal boundary_check_U0_ap_ready : STD_LOGIC;
    signal boundary_check_U0_pageOffsetFifo_V_read : STD_LOGIC;
    signal boundary_check_U0_cmdOut_V_TDATA : STD_LOGIC_VECTOR (95 downto 0);
    signal boundary_check_U0_cmdOut_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal regBaseVaddr_V_c_full_n : STD_LOGIC;
    signal regBaseVaddr_V_c_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal regBaseVaddr_V_c_empty_n : STD_LOGIC;
    signal pageOffsetFifo_V_full_n : STD_LOGIC;
    signal pageOffsetFifo_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal pageOffsetFifo_V_empty_n : STD_LOGIC;

    component mem_write_cmd_page_b_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        regBaseVaddr_V : IN STD_LOGIC_VECTOR (47 downto 0);
        regBaseVaddr_V_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        regBaseVaddr_V_out_full_n : IN STD_LOGIC;
        regBaseVaddr_V_out_write : OUT STD_LOGIC );
    end component;


    component calculate_page_offse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cmdIn_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
        cmdIn_V_TVALID : IN STD_LOGIC;
        cmdIn_V_TREADY : OUT STD_LOGIC;
        regBaseVaddr_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        regBaseVaddr_V_empty_n : IN STD_LOGIC;
        regBaseVaddr_V_read : OUT STD_LOGIC;
        pageOffsetFifo_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        pageOffsetFifo_V_full_n : IN STD_LOGIC;
        pageOffsetFifo_V_write : OUT STD_LOGIC );
    end component;


    component boundary_check IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pageOffsetFifo_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        pageOffsetFifo_V_empty_n : IN STD_LOGIC;
        pageOffsetFifo_V_read : OUT STD_LOGIC;
        cmdOut_V_TREADY : IN STD_LOGIC;
        cmdOut_V_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
        cmdOut_V_TVALID : OUT STD_LOGIC );
    end component;


    component fifo_w48_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w128_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    mem_write_cmd_page_b_1_U0 : component mem_write_cmd_page_b_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mem_write_cmd_page_b_1_U0_ap_start,
        ap_done => mem_write_cmd_page_b_1_U0_ap_done,
        ap_continue => mem_write_cmd_page_b_1_U0_ap_continue,
        ap_idle => mem_write_cmd_page_b_1_U0_ap_idle,
        ap_ready => mem_write_cmd_page_b_1_U0_ap_ready,
        regBaseVaddr_V => regBaseVaddr_V,
        regBaseVaddr_V_out_din => mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din,
        regBaseVaddr_V_out_full_n => regBaseVaddr_V_c_full_n,
        regBaseVaddr_V_out_write => mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write);

    calculate_page_offse_U0 : component calculate_page_offse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => calculate_page_offse_U0_ap_start,
        ap_done => calculate_page_offse_U0_ap_done,
        ap_continue => calculate_page_offse_U0_ap_continue,
        ap_idle => calculate_page_offse_U0_ap_idle,
        ap_ready => calculate_page_offse_U0_ap_ready,
        cmdIn_V_TDATA => s_axis_cmd_V_TDATA,
        cmdIn_V_TVALID => s_axis_cmd_V_TVALID,
        cmdIn_V_TREADY => calculate_page_offse_U0_cmdIn_V_TREADY,
        regBaseVaddr_V_dout => regBaseVaddr_V_c_dout,
        regBaseVaddr_V_empty_n => regBaseVaddr_V_c_empty_n,
        regBaseVaddr_V_read => calculate_page_offse_U0_regBaseVaddr_V_read,
        pageOffsetFifo_V_din => calculate_page_offse_U0_pageOffsetFifo_V_din,
        pageOffsetFifo_V_full_n => pageOffsetFifo_V_full_n,
        pageOffsetFifo_V_write => calculate_page_offse_U0_pageOffsetFifo_V_write);

    boundary_check_U0 : component boundary_check
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => boundary_check_U0_ap_start,
        ap_done => boundary_check_U0_ap_done,
        ap_continue => boundary_check_U0_ap_continue,
        ap_idle => boundary_check_U0_ap_idle,
        ap_ready => boundary_check_U0_ap_ready,
        pageOffsetFifo_V_dout => pageOffsetFifo_V_dout,
        pageOffsetFifo_V_empty_n => pageOffsetFifo_V_empty_n,
        pageOffsetFifo_V_read => boundary_check_U0_pageOffsetFifo_V_read,
        cmdOut_V_TREADY => m_axis_cmd_V_TREADY,
        cmdOut_V_TDATA => boundary_check_U0_cmdOut_V_TDATA,
        cmdOut_V_TVALID => boundary_check_U0_cmdOut_V_TVALID);

    regBaseVaddr_V_c_U : component fifo_w48_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din,
        if_full_n => regBaseVaddr_V_c_full_n,
        if_write => mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write,
        if_dout => regBaseVaddr_V_c_dout,
        if_empty_n => regBaseVaddr_V_c_empty_n,
        if_read => calculate_page_offse_U0_regBaseVaddr_V_read);

    pageOffsetFifo_V_U : component fifo_w128_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calculate_page_offse_U0_pageOffsetFifo_V_din,
        if_full_n => pageOffsetFifo_V_full_n,
        if_write => calculate_page_offse_U0_pageOffsetFifo_V_write,
        if_dout => pageOffsetFifo_V_dout,
        if_empty_n => pageOffsetFifo_V_empty_n,
        if_read => boundary_check_U0_pageOffsetFifo_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    boundary_check_U0_ap_continue <= ap_const_logic_1;
    boundary_check_U0_ap_start <= ap_const_logic_1;
    calculate_page_offse_U0_ap_continue <= ap_const_logic_1;
    calculate_page_offse_U0_ap_start <= ap_const_logic_1;
    m_axis_cmd_V_TDATA <= boundary_check_U0_cmdOut_V_TDATA;
    m_axis_cmd_V_TVALID <= boundary_check_U0_cmdOut_V_TVALID;
    mem_write_cmd_page_b_1_U0_ap_continue <= ap_const_logic_1;
    mem_write_cmd_page_b_1_U0_ap_start <= ap_const_logic_1;
    s_axis_cmd_V_TREADY <= calculate_page_offse_U0_cmdIn_V_TREADY;
end behav;
