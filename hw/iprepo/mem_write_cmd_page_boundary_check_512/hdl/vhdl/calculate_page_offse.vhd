-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculate_page_offse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmdIn_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    cmdIn_V_TVALID : IN STD_LOGIC;
    cmdIn_V_TREADY : OUT STD_LOGIC;
    regBaseVaddr_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    regBaseVaddr_V_empty_n : IN STD_LOGIC;
    regBaseVaddr_V_read : OUT STD_LOGIC;
    pageOffsetFifo_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    pageOffsetFifo_V_full_n : IN STD_LOGIC;
    pageOffsetFifo_V_write : OUT STD_LOGIC );
end;


architecture behav of calculate_page_offse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_200000 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cmdIn_V_TDATA_blk_n : STD_LOGIC;
    signal and_ln36_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal regBaseVaddr_V_blk_n : STD_LOGIC;
    signal pageOffsetFifo_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_56_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_85_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln214_fu_91_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln214_1_fu_95_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal page_offset_V_fu_99_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln214_1_fu_109_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal newLength_V_fu_113_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln214_fu_105_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_len_V_fu_119_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_addr_V_fu_129_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_i_fu_133_p5 : STD_LOGIC_VECTOR (125 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln36_fu_85_p1 <= (0=>pageOffsetFifo_V_full_n, others=>'-');
    and_ln36_fu_85_p2 <= (tmp_nbreadreq_fu_56_p3 and and_ln36_fu_85_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cmdIn_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_1 = and_ln36_fu_85_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmdIn_V_TDATA_blk_n <= cmdIn_V_TVALID;
        else 
            cmdIn_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cmdIn_V_TREADY_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln36_fu_85_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmdIn_V_TREADY <= ap_const_logic_1;
        else 
            cmdIn_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    newLength_V_fu_113_p2 <= std_logic_vector(signed(ap_const_lv22_200000) - signed(zext_ln214_1_fu_109_p1));

    pageOffsetFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_lv1_1 = and_ln36_fu_85_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pageOffsetFifo_V_blk_n <= pageOffsetFifo_V_full_n;
        else 
            pageOffsetFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    pageOffsetFifo_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_fu_133_p5),128));

    pageOffsetFifo_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln36_fu_85_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pageOffsetFifo_V_write <= ap_const_logic_1;
        else 
            pageOffsetFifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

    page_offset_V_fu_99_p2 <= std_logic_vector(unsigned(trunc_ln214_fu_91_p1) - unsigned(trunc_ln214_1_fu_95_p1));

    regBaseVaddr_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, regBaseVaddr_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regBaseVaddr_V_blk_n <= regBaseVaddr_V_empty_n;
        else 
            regBaseVaddr_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    regBaseVaddr_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmdIn_V_TVALID, regBaseVaddr_V_empty_n, pageOffsetFifo_V_full_n, and_ln36_fu_85_p2)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (regBaseVaddr_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (pageOffsetFifo_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = and_ln36_fu_85_p2) and (cmdIn_V_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regBaseVaddr_V_read <= ap_const_logic_1;
        else 
            regBaseVaddr_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_i_fu_133_p5 <= (((newLength_V_fu_113_p2 & zext_ln214_fu_105_p1) & tmp_len_V_fu_119_p4) & tmp_addr_V_fu_129_p1);
    tmp_addr_V_fu_129_p1 <= cmdIn_V_TDATA(48 - 1 downto 0);
    tmp_len_V_fu_119_p4 <= cmdIn_V_TDATA(95 downto 64);
    tmp_nbreadreq_fu_56_p3 <= (0=>(cmdIn_V_TVALID), others=>'-');
    trunc_ln214_1_fu_95_p1 <= regBaseVaddr_V_dout(21 - 1 downto 0);
    trunc_ln214_fu_91_p1 <= cmdIn_V_TDATA(21 - 1 downto 0);
    zext_ln214_1_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(page_offset_V_fu_99_p2),22));
    zext_ln214_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(page_offset_V_fu_99_p2),24));
end behav;
