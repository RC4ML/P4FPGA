// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mem_write_cmd_page_boundary_check_512,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.435312,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=588,HLS_SYN_LUT=822,HLS_VERSION=2020_1}" *)

module mem_write_cmd_page_boundary_check_512 (
        s_axis_cmd_V_TDATA,
        m_axis_cmd_V_TDATA,
        regBaseVaddr_V,
        ap_clk,
        ap_rst_n,
        s_axis_cmd_V_TVALID,
        s_axis_cmd_V_TREADY,
        m_axis_cmd_V_TVALID,
        m_axis_cmd_V_TREADY
);


input  [95:0] s_axis_cmd_V_TDATA;
output  [95:0] m_axis_cmd_V_TDATA;
input  [47:0] regBaseVaddr_V;
input   ap_clk;
input   ap_rst_n;
input   s_axis_cmd_V_TVALID;
output   s_axis_cmd_V_TREADY;
output   m_axis_cmd_V_TVALID;
input   m_axis_cmd_V_TREADY;

 reg    ap_rst_n_inv;
wire    mem_write_cmd_page_b_1_U0_ap_start;
wire    mem_write_cmd_page_b_1_U0_ap_done;
wire    mem_write_cmd_page_b_1_U0_ap_continue;
wire    mem_write_cmd_page_b_1_U0_ap_idle;
wire    mem_write_cmd_page_b_1_U0_ap_ready;
wire   [47:0] mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din;
wire    mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write;
wire    calculate_page_offse_U0_ap_start;
wire    calculate_page_offse_U0_ap_done;
wire    calculate_page_offse_U0_ap_continue;
wire    calculate_page_offse_U0_ap_idle;
wire    calculate_page_offse_U0_ap_ready;
wire    calculate_page_offse_U0_cmdIn_V_TREADY;
wire    calculate_page_offse_U0_regBaseVaddr_V_read;
wire   [127:0] calculate_page_offse_U0_pageOffsetFifo_V_din;
wire    calculate_page_offse_U0_pageOffsetFifo_V_write;
wire    boundary_check_U0_ap_start;
wire    boundary_check_U0_ap_done;
wire    boundary_check_U0_ap_continue;
wire    boundary_check_U0_ap_idle;
wire    boundary_check_U0_ap_ready;
wire    boundary_check_U0_pageOffsetFifo_V_read;
wire   [95:0] boundary_check_U0_cmdOut_V_TDATA;
wire    boundary_check_U0_cmdOut_V_TVALID;
wire    ap_sync_continue;
wire    regBaseVaddr_V_c_full_n;
wire   [47:0] regBaseVaddr_V_c_dout;
wire    regBaseVaddr_V_c_empty_n;
wire    pageOffsetFifo_V_full_n;
wire   [127:0] pageOffsetFifo_V_dout;
wire    pageOffsetFifo_V_empty_n;

mem_write_cmd_page_b_1 mem_write_cmd_page_b_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(mem_write_cmd_page_b_1_U0_ap_start),
    .ap_done(mem_write_cmd_page_b_1_U0_ap_done),
    .ap_continue(mem_write_cmd_page_b_1_U0_ap_continue),
    .ap_idle(mem_write_cmd_page_b_1_U0_ap_idle),
    .ap_ready(mem_write_cmd_page_b_1_U0_ap_ready),
    .regBaseVaddr_V(regBaseVaddr_V),
    .regBaseVaddr_V_out_din(mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din),
    .regBaseVaddr_V_out_full_n(regBaseVaddr_V_c_full_n),
    .regBaseVaddr_V_out_write(mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write)
);

calculate_page_offse calculate_page_offse_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(calculate_page_offse_U0_ap_start),
    .ap_done(calculate_page_offse_U0_ap_done),
    .ap_continue(calculate_page_offse_U0_ap_continue),
    .ap_idle(calculate_page_offse_U0_ap_idle),
    .ap_ready(calculate_page_offse_U0_ap_ready),
    .cmdIn_V_TDATA(s_axis_cmd_V_TDATA),
    .cmdIn_V_TVALID(s_axis_cmd_V_TVALID),
    .cmdIn_V_TREADY(calculate_page_offse_U0_cmdIn_V_TREADY),
    .regBaseVaddr_V_dout(regBaseVaddr_V_c_dout),
    .regBaseVaddr_V_empty_n(regBaseVaddr_V_c_empty_n),
    .regBaseVaddr_V_read(calculate_page_offse_U0_regBaseVaddr_V_read),
    .pageOffsetFifo_V_din(calculate_page_offse_U0_pageOffsetFifo_V_din),
    .pageOffsetFifo_V_full_n(pageOffsetFifo_V_full_n),
    .pageOffsetFifo_V_write(calculate_page_offse_U0_pageOffsetFifo_V_write)
);

boundary_check boundary_check_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(boundary_check_U0_ap_start),
    .ap_done(boundary_check_U0_ap_done),
    .ap_continue(boundary_check_U0_ap_continue),
    .ap_idle(boundary_check_U0_ap_idle),
    .ap_ready(boundary_check_U0_ap_ready),
    .pageOffsetFifo_V_dout(pageOffsetFifo_V_dout),
    .pageOffsetFifo_V_empty_n(pageOffsetFifo_V_empty_n),
    .pageOffsetFifo_V_read(boundary_check_U0_pageOffsetFifo_V_read),
    .cmdOut_V_TREADY(m_axis_cmd_V_TREADY),
    .cmdOut_V_TDATA(boundary_check_U0_cmdOut_V_TDATA),
    .cmdOut_V_TVALID(boundary_check_U0_cmdOut_V_TVALID)
);

fifo_w48_d2_A regBaseVaddr_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_din),
    .if_full_n(regBaseVaddr_V_c_full_n),
    .if_write(mem_write_cmd_page_b_1_U0_regBaseVaddr_V_out_write),
    .if_dout(regBaseVaddr_V_c_dout),
    .if_empty_n(regBaseVaddr_V_c_empty_n),
    .if_read(calculate_page_offse_U0_regBaseVaddr_V_read)
);

fifo_w128_d8_A pageOffsetFifo_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(calculate_page_offse_U0_pageOffsetFifo_V_din),
    .if_full_n(pageOffsetFifo_V_full_n),
    .if_write(calculate_page_offse_U0_pageOffsetFifo_V_write),
    .if_dout(pageOffsetFifo_V_dout),
    .if_empty_n(pageOffsetFifo_V_empty_n),
    .if_read(boundary_check_U0_pageOffsetFifo_V_read)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign boundary_check_U0_ap_continue = 1'b1;

assign boundary_check_U0_ap_start = 1'b1;

assign calculate_page_offse_U0_ap_continue = 1'b1;

assign calculate_page_offse_U0_ap_start = 1'b1;

assign m_axis_cmd_V_TDATA = boundary_check_U0_cmdOut_V_TDATA;

assign m_axis_cmd_V_TVALID = boundary_check_U0_cmdOut_V_TVALID;

assign mem_write_cmd_page_b_1_U0_ap_continue = 1'b1;

assign mem_write_cmd_page_b_1_U0_ap_start = 1'b1;

assign s_axis_cmd_V_TREADY = calculate_page_offse_U0_cmdIn_V_TREADY;

endmodule //mem_write_cmd_page_boundary_check_512
