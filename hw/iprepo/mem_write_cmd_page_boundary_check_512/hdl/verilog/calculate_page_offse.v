// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calculate_page_offse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cmdIn_V_TDATA,
        cmdIn_V_TVALID,
        cmdIn_V_TREADY,
        regBaseVaddr_V_dout,
        regBaseVaddr_V_empty_n,
        regBaseVaddr_V_read,
        pageOffsetFifo_V_din,
        pageOffsetFifo_V_full_n,
        pageOffsetFifo_V_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [95:0] cmdIn_V_TDATA;
input   cmdIn_V_TVALID;
output   cmdIn_V_TREADY;
input  [47:0] regBaseVaddr_V_dout;
input   regBaseVaddr_V_empty_n;
output   regBaseVaddr_V_read;
output  [127:0] pageOffsetFifo_V_din;
input   pageOffsetFifo_V_full_n;
output   pageOffsetFifo_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cmdIn_V_TREADY;
reg regBaseVaddr_V_read;
reg pageOffsetFifo_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cmdIn_V_TDATA_blk_n;
wire   [0:0] and_ln36_fu_85_p2;
reg    regBaseVaddr_V_blk_n;
reg    pageOffsetFifo_V_blk_n;
reg    ap_block_state1;
wire   [0:0] tmp_nbreadreq_fu_56_p3;
wire   [0:0] and_ln36_fu_85_p1;
wire   [20:0] trunc_ln214_fu_91_p1;
wire   [20:0] trunc_ln214_1_fu_95_p1;
wire   [20:0] page_offset_V_fu_99_p2;
wire   [21:0] zext_ln214_1_fu_109_p1;
wire   [21:0] newLength_V_fu_113_p2;
wire   [23:0] zext_ln214_fu_105_p1;
wire   [31:0] tmp_len_V_fu_119_p4;
wire   [47:0] tmp_addr_V_fu_129_p1;
wire   [125:0] tmp_2_i_fu_133_p5;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd1 == and_ln36_fu_85_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        cmdIn_V_TDATA_blk_n = cmdIn_V_TVALID;
    end else begin
        cmdIn_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'd1 == and_ln36_fu_85_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        cmdIn_V_TREADY = 1'b1;
    end else begin
        cmdIn_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'd1 == and_ln36_fu_85_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        pageOffsetFifo_V_blk_n = pageOffsetFifo_V_full_n;
    end else begin
        pageOffsetFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'd1 == and_ln36_fu_85_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        pageOffsetFifo_V_write = 1'b1;
    end else begin
        pageOffsetFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        regBaseVaddr_V_blk_n = regBaseVaddr_V_empty_n;
    end else begin
        regBaseVaddr_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        regBaseVaddr_V_read = 1'b1;
    end else begin
        regBaseVaddr_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln36_fu_85_p1 = pageOffsetFifo_V_full_n;

assign and_ln36_fu_85_p2 = (tmp_nbreadreq_fu_56_p3 & and_ln36_fu_85_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (regBaseVaddr_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((1'd1 == and_ln36_fu_85_p2) & (pageOffsetFifo_V_full_n == 1'b0)) | ((1'd1 == and_ln36_fu_85_p2) & (cmdIn_V_TVALID == 1'b0)));
end

assign newLength_V_fu_113_p2 = ($signed(22'd2097152) - $signed(zext_ln214_1_fu_109_p1));

assign pageOffsetFifo_V_din = tmp_2_i_fu_133_p5;

assign page_offset_V_fu_99_p2 = (trunc_ln214_fu_91_p1 - trunc_ln214_1_fu_95_p1);

assign tmp_2_i_fu_133_p5 = {{{{newLength_V_fu_113_p2}, {zext_ln214_fu_105_p1}}, {tmp_len_V_fu_119_p4}}, {tmp_addr_V_fu_129_p1}};

assign tmp_addr_V_fu_129_p1 = cmdIn_V_TDATA[47:0];

assign tmp_len_V_fu_119_p4 = {{cmdIn_V_TDATA[95:64]}};

assign tmp_nbreadreq_fu_56_p3 = cmdIn_V_TVALID;

assign trunc_ln214_1_fu_95_p1 = regBaseVaddr_V_dout[20:0];

assign trunc_ln214_fu_91_p1 = cmdIn_V_TDATA[20:0];

assign zext_ln214_1_fu_109_p1 = page_offset_V_fu_99_p2;

assign zext_ln214_fu_105_p1 = page_offset_V_fu_99_p2;

endmodule //calculate_page_offse
