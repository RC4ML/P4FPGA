// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tlb,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.305000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=43,HLS_SYN_DSP=0,HLS_SYN_FF=825,HLS_SYN_LUT=780,HLS_VERSION=2020_1}" *)

module tlb (
        ap_clk,
        ap_rst_n,
        s_axis_mem_write_cmd_V_TDATA,
        s_axis_mem_write_cmd_V_TVALID,
        s_axis_mem_write_cmd_V_TREADY,
        s_axis_mem_read_cmd_V_TDATA,
        s_axis_mem_read_cmd_V_TVALID,
        s_axis_mem_read_cmd_V_TREADY,
        m_axis_dma_write_cmd_V_TDATA,
        m_axis_dma_write_cmd_V_TVALID,
        m_axis_dma_write_cmd_V_TREADY,
        m_axis_dma_read_cmd_V_TDATA,
        m_axis_dma_read_cmd_V_TVALID,
        m_axis_dma_read_cmd_V_TREADY,
        s_axis_tlb_interface_V_TDATA,
        s_axis_tlb_interface_V_TVALID,
        s_axis_tlb_interface_V_TREADY,
        regTlbMissCount_V,
        regTlbMissCount_V_ap_vld,
        regPageCrossingCount_V,
        regPageCrossingCount_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [95:0] s_axis_mem_write_cmd_V_TDATA;
input   s_axis_mem_write_cmd_V_TVALID;
output   s_axis_mem_write_cmd_V_TREADY;
input  [95:0] s_axis_mem_read_cmd_V_TDATA;
input   s_axis_mem_read_cmd_V_TVALID;
output   s_axis_mem_read_cmd_V_TREADY;
output  [95:0] m_axis_dma_write_cmd_V_TDATA;
output   m_axis_dma_write_cmd_V_TVALID;
input   m_axis_dma_write_cmd_V_TREADY;
output  [95:0] m_axis_dma_read_cmd_V_TDATA;
output   m_axis_dma_read_cmd_V_TVALID;
input   m_axis_dma_read_cmd_V_TREADY;
input  [135:0] s_axis_tlb_interface_V_TDATA;
input   s_axis_tlb_interface_V_TVALID;
output   s_axis_tlb_interface_V_TREADY;
output  [31:0] regTlbMissCount_V;
output   regTlbMissCount_V_ap_vld;
output  [31:0] regPageCrossingCount_V;
output   regPageCrossingCount_V_ap_vld;

reg s_axis_mem_write_cmd_V_TREADY;
reg s_axis_mem_read_cmd_V_TREADY;
reg s_axis_tlb_interface_V_TREADY;
reg regTlbMissCount_V_ap_vld;
reg regPageCrossingCount_V_ap_vld;

 reg    ap_rst_n_inv;
reg   [63:0] base_vaddr_V;
reg   [31:0] top_page_base_V;
reg   [31:0] tlbMissCounter_V;
reg   [31:0] tlbPageCrossingCount;
reg   [13:0] tlb_table_paddr_V_address0;
reg    tlb_table_paddr_V_ce0;
reg    tlb_table_paddr_V_we0;
wire   [47:0] tlb_table_paddr_V_q0;
reg    s_axis_mem_write_cmd_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_nbreadreq_fu_94_p3;
reg    s_axis_mem_read_cmd_V_TDATA_blk_n;
wire   [0:0] tmp_1_nbreadreq_fu_102_p3;
reg    m_axis_dma_write_cmd_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_526;
reg   [0:0] tmp_reg_526_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_reg_526_pp0_iter2_reg;
reg    m_axis_dma_read_cmd_V_TDATA_blk_n;
reg   [0:0] tmp_1_reg_535;
reg   [0:0] tmp_1_reg_535_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_535_pp0_iter2_reg;
reg    s_axis_tlb_interface_V_TDATA_blk_n;
wire   [0:0] tmp_2_nbreadreq_fu_110_p3;
reg    ap_predicate_op12_read_state1;
reg    ap_predicate_op19_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_predicate_op74_write_state3;
reg    ap_block_state3_io;
wire    regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk;
wire    regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_predicate_op105_write_state4;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_2_reg_539;
wire   [63:0] trunc_ln321_2_fu_230_p1;
reg   [63:0] trunc_ln321_2_reg_543;
reg   [47:0] trunc_ln209_2_reg_552;
reg   [31:0] tmp_len_V_2_load_new_reg_557;
wire   [20:0] page_offset_V_1_fu_278_p1;
reg   [20:0] page_offset_V_1_reg_562;
reg   [20:0] page_offset_V_1_reg_562_pp0_iter1_reg;
reg   [42:0] r_V_1_reg_568;
reg   [27:0] tmp_len_V_1_reg_574;
reg   [27:0] tmp_len_V_1_reg_574_pp0_iter1_reg;
reg   [31:0] tmp_len_V_load_new_reg_579;
wire   [20:0] page_offset_V_fu_322_p1;
reg   [20:0] page_offset_V_reg_584;
reg   [20:0] page_offset_V_reg_584_pp0_iter1_reg;
reg   [42:0] r_V_reg_590;
reg   [27:0] tmp_len_V_reg_596;
reg   [27:0] tmp_len_V_reg_596_pp0_iter1_reg;
wire   [0:0] icmp_ln895_4_fu_374_p2;
wire   [0:0] icmp_ln895_2_fu_404_p2;
reg   [0:0] icmp_ln895_2_reg_610;
reg   [0:0] icmp_ln895_2_reg_610_pp0_iter2_reg;
wire   [0:0] icmp_ln895_3_fu_421_p2;
reg   [0:0] icmp_ln895_3_reg_614;
reg   [0:0] icmp_ln895_3_reg_614_pp0_iter2_reg;
wire   [0:0] icmp_ln895_fu_435_p2;
reg   [0:0] icmp_ln895_reg_623;
reg   [0:0] icmp_ln895_reg_623_pp0_iter2_reg;
wire   [0:0] icmp_ln895_1_fu_452_p2;
reg   [0:0] icmp_ln895_1_reg_627;
reg   [0:0] icmp_ln895_1_reg_627_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] ap_phi_reg_pp0_iter0_base_vaddr_V_loc_0_reg_193;
reg   [63:0] ap_phi_reg_pp0_iter1_base_vaddr_V_loc_0_reg_193;
wire   [0:0] tmp_4_fu_234_p3;
wire   [63:0] r_V_8_fu_365_p1;
wire   [63:0] r_V_7_fu_396_p1;
wire   [63:0] r_V_6_fu_427_p1;
wire   [31:0] grp_fu_202_p2;
wire   [31:0] grp_fu_214_p2;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] trunc_ln321_1_fu_258_p1;
wire   [63:0] addr_V_1_fu_272_p2;
wire   [63:0] trunc_ln321_fu_302_p1;
wire   [63:0] addr_V_fu_316_p2;
wire   [63:0] addr_V_2_fu_350_p2;
wire   [42:0] r_V_2_fu_355_p4;
wire   [42:0] zext_ln895_2_fu_370_p1;
wire   [42:0] zext_ln895_1_fu_400_p1;
wire   [32:0] zext_ln215_2_fu_409_p1;
wire   [32:0] zext_ln215_3_fu_412_p1;
wire   [32:0] ret_V_1_fu_415_p2;
wire   [42:0] zext_ln895_fu_431_p1;
wire   [32:0] zext_ln215_fu_440_p1;
wire   [32:0] zext_ln215_1_fu_443_p1;
wire   [32:0] ret_V_fu_446_p2;
wire   [48:0] zext_ln78_2_fu_461_p1;
wire   [48:0] zext_ln214_1_fu_458_p1;
wire   [48:0] tmp_addr_V_1_fu_465_p2;
wire   [63:0] zext_ln78_3_fu_471_p1;
wire   [91:0] tmp_3_fu_475_p3;
wire   [48:0] zext_ln78_fu_490_p1;
wire   [48:0] zext_ln214_fu_487_p1;
wire   [48:0] tmp_addr_V_fu_494_p2;
wire   [63:0] zext_ln78_1_fu_500_p1;
wire   [91:0] tmp_12_fu_504_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] m_axis_dma_write_cmd_V_TDATA_int;
reg    m_axis_dma_write_cmd_V_TVALID_int;
wire    m_axis_dma_write_cmd_V_TREADY_int;
wire    regslice_both_m_axis_dma_write_cmd_V_U_vld_out;
wire   [95:0] m_axis_dma_read_cmd_V_TDATA_int;
reg    m_axis_dma_read_cmd_V_TVALID_int;
wire    m_axis_dma_read_cmd_V_TREADY_int;
wire    regslice_both_m_axis_dma_read_cmd_V_U_vld_out;
reg    ap_condition_247;
reg    ap_condition_253;
reg    ap_condition_244;
reg    ap_condition_202;
reg    ap_condition_257;

// power-on initialization
initial begin
#0 base_vaddr_V = 64'd0;
#0 top_page_base_V = 32'd0;
#0 tlbMissCounter_V = 32'd0;
#0 tlbPageCrossingCount = 32'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

tlb_tlb_table_padbkb #(
    .DataWidth( 48 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
tlb_table_paddr_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tlb_table_paddr_V_address0),
    .ce0(tlb_table_paddr_V_ce0),
    .we0(tlb_table_paddr_V_we0),
    .d0(trunc_ln209_2_reg_552),
    .q0(tlb_table_paddr_V_q0)
);

regslice_both #(
    .DataWidth( 96 ))
regslice_both_m_axis_dma_write_cmd_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_dma_write_cmd_V_TDATA_int),
    .vld_in(m_axis_dma_write_cmd_V_TVALID_int),
    .ack_in(m_axis_dma_write_cmd_V_TREADY_int),
    .data_out(m_axis_dma_write_cmd_V_TDATA),
    .vld_out(regslice_both_m_axis_dma_write_cmd_V_U_vld_out),
    .ack_out(m_axis_dma_write_cmd_V_TREADY),
    .apdone_blk(regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 96 ))
regslice_both_m_axis_dma_read_cmd_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_dma_read_cmd_V_TDATA_int),
    .vld_in(m_axis_dma_read_cmd_V_TVALID_int),
    .ack_in(m_axis_dma_read_cmd_V_TREADY_int),
    .data_out(m_axis_dma_read_cmd_V_TDATA),
    .vld_out(regslice_both_m_axis_dma_read_cmd_V_U_vld_out),
    .ack_out(m_axis_dma_read_cmd_V_TREADY),
    .apdone_blk(regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_244)) begin
        if ((1'b1 == ap_condition_253)) begin
            ap_phi_reg_pp0_iter1_base_vaddr_V_loc_0_reg_193 <= base_vaddr_V;
        end else if ((1'b1 == ap_condition_247)) begin
            ap_phi_reg_pp0_iter1_base_vaddr_V_loc_0_reg_193 <= trunc_ln321_2_fu_230_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_base_vaddr_V_loc_0_reg_193 <= ap_phi_reg_pp0_iter0_base_vaddr_V_loc_0_reg_193;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_4_fu_234_p3 == 1'd1) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        base_vaddr_V <= trunc_ln321_2_fu_230_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_526 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln895_1_reg_627 <= icmp_ln895_1_fu_452_p2;
        icmp_ln895_reg_623 <= icmp_ln895_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln895_1_reg_627_pp0_iter2_reg <= icmp_ln895_1_reg_627;
        icmp_ln895_2_reg_610_pp0_iter2_reg <= icmp_ln895_2_reg_610;
        icmp_ln895_3_reg_614_pp0_iter2_reg <= icmp_ln895_3_reg_614;
        icmp_ln895_reg_623_pp0_iter2_reg <= icmp_ln895_reg_623;
        tmp_1_reg_535_pp0_iter2_reg <= tmp_1_reg_535_pp0_iter1_reg;
        tmp_reg_526_pp0_iter2_reg <= tmp_reg_526_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_526 == 1'd0) & (tmp_1_reg_535 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln895_2_reg_610 <= icmp_ln895_2_fu_404_p2;
        icmp_ln895_3_reg_614 <= icmp_ln895_3_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        page_offset_V_1_reg_562 <= page_offset_V_1_fu_278_p1;
        r_V_1_reg_568 <= {{addr_V_1_fu_272_p2[63:21]}};
        tmp_len_V_1_reg_574 <= {{s_axis_mem_read_cmd_V_TDATA[91:64]}};
        tmp_len_V_2_load_new_reg_557 <= {{s_axis_mem_read_cmd_V_TDATA[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        page_offset_V_1_reg_562_pp0_iter1_reg <= page_offset_V_1_reg_562;
        page_offset_V_reg_584_pp0_iter1_reg <= page_offset_V_reg_584;
        tmp_1_reg_535_pp0_iter1_reg <= tmp_1_reg_535;
        tmp_len_V_1_reg_574_pp0_iter1_reg <= tmp_len_V_1_reg_574;
        tmp_len_V_reg_596_pp0_iter1_reg <= tmp_len_V_reg_596;
        tmp_reg_526 <= tmp_nbreadreq_fu_94_p3;
        tmp_reg_526_pp0_iter1_reg <= tmp_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        page_offset_V_reg_584 <= page_offset_V_fu_322_p1;
        r_V_reg_590 <= {{addr_V_fu_316_p2[63:21]}};
        tmp_len_V_load_new_reg_579 <= {{s_axis_mem_write_cmd_V_TDATA[95:64]}};
        tmp_len_V_reg_596 <= {{s_axis_mem_write_cmd_V_TDATA[91:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1) & (icmp_ln895_2_reg_610_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_reg_526_pp0_iter2_reg == 1'd1) & (icmp_ln895_reg_623_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tlbMissCounter_V <= grp_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1) & (icmp_ln895_3_reg_614_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_reg_526_pp0_iter2_reg == 1'd1) & (icmp_ln895_1_reg_627_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tlbPageCrossingCount <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_535 <= tmp_1_nbreadreq_fu_102_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_539 <= tmp_2_nbreadreq_fu_110_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_535 == 1'd0) & (tmp_reg_526 == 1'd0) & (icmp_ln895_4_fu_374_p2 == 1'd1) & (tmp_2_reg_539 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        top_page_base_V <= {{addr_V_2_fu_350_p2[52:21]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln209_2_reg_552 <= {{s_axis_tlb_interface_V_TDATA[111:64]}};
        trunc_ln321_2_reg_543 <= trunc_ln321_2_fu_230_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_526_pp0_iter1_reg == 1'd0) & (tmp_1_reg_535_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        m_axis_dma_read_cmd_V_TDATA_blk_n = m_axis_dma_read_cmd_V_TREADY_int;
    end else begin
        m_axis_dma_read_cmd_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op74_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_dma_read_cmd_V_TVALID_int = 1'b1;
    end else begin
        m_axis_dma_read_cmd_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_526_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        m_axis_dma_write_cmd_V_TDATA_blk_n = m_axis_dma_write_cmd_V_TREADY_int;
    end else begin
        m_axis_dma_write_cmd_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_526_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_dma_write_cmd_V_TVALID_int = 1'b1;
    end else begin
        m_axis_dma_write_cmd_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1) & (icmp_ln895_3_reg_614_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_reg_526_pp0_iter2_reg == 1'd1) & (icmp_ln895_1_reg_627_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        regPageCrossingCount_V_ap_vld = 1'b1;
    end else begin
        regPageCrossingCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1) & (icmp_ln895_2_reg_610_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_reg_526_pp0_iter2_reg == 1'd1) & (icmp_ln895_reg_623_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        regTlbMissCount_V_ap_vld = 1'b1;
    end else begin
        regTlbMissCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_mem_read_cmd_V_TDATA_blk_n = s_axis_mem_read_cmd_V_TVALID;
    end else begin
        s_axis_mem_read_cmd_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op19_read_state1 == 1'b1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_mem_read_cmd_V_TREADY = 1'b1;
    end else begin
        s_axis_mem_read_cmd_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_mem_write_cmd_V_TDATA_blk_n = s_axis_mem_write_cmd_V_TVALID;
    end else begin
        s_axis_mem_write_cmd_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_mem_write_cmd_V_TREADY = 1'b1;
    end else begin
        s_axis_mem_write_cmd_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_tlb_interface_V_TDATA_blk_n = s_axis_tlb_interface_V_TVALID;
    end else begin
        s_axis_tlb_interface_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op12_read_state1 == 1'b1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_tlb_interface_V_TREADY = 1'b1;
    end else begin
        s_axis_tlb_interface_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_257)) begin
        if ((tmp_reg_526 == 1'd1)) begin
            tlb_table_paddr_V_address0 = r_V_6_fu_427_p1;
        end else if (((tmp_reg_526 == 1'd0) & (tmp_1_reg_535 == 1'd1))) begin
            tlb_table_paddr_V_address0 = r_V_7_fu_396_p1;
        end else if ((1'b1 == ap_condition_202)) begin
            tlb_table_paddr_V_address0 = r_V_8_fu_365_p1;
        end else begin
            tlb_table_paddr_V_address0 = 'bx;
        end
    end else begin
        tlb_table_paddr_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_526 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_reg_526 == 1'd0) & (tmp_1_reg_535 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_1_reg_535 == 1'd0) & (tmp_reg_526 == 1'd0) & (tmp_2_reg_539 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tlb_table_paddr_V_ce0 = 1'b1;
    end else begin
        tlb_table_paddr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_535 == 1'd0) & (tmp_reg_526 == 1'd0) & (tmp_2_reg_539 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tlb_table_paddr_V_we0 = 1'b1;
    end else begin
        tlb_table_paddr_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_V_1_fu_272_p2 = (trunc_ln321_1_fu_258_p1 - base_vaddr_V);

assign addr_V_2_fu_350_p2 = (trunc_ln321_2_reg_543 - ap_phi_reg_pp0_iter1_base_vaddr_V_loc_0_reg_193);

assign addr_V_fu_316_p2 = (trunc_ln321_fu_302_p1 - base_vaddr_V);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk == 1'b1) | (regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (s_axis_mem_write_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op19_read_state1 == 1'b1) & (s_axis_mem_read_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_tlb_interface_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk == 1'b1) | (regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == 1'b1) & (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (s_axis_mem_write_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op19_read_state1 == 1'b1) & (s_axis_mem_read_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_tlb_interface_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk == 1'b1) | (regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk == 1'b1))) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == 1'b1) & (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (s_axis_mem_write_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op19_read_state1 == 1'b1) & (s_axis_mem_read_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_tlb_interface_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((tmp_nbreadreq_fu_94_p3 == 1'd1) & (s_axis_mem_write_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op19_read_state1 == 1'b1) & (s_axis_mem_read_cmd_V_TVALID == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (s_axis_tlb_interface_V_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((tmp_reg_526_pp0_iter1_reg == 1'd1) & (m_axis_dma_write_cmd_V_TREADY_int == 1'b0)) | ((ap_predicate_op74_write_state3 == 1'b1) & (m_axis_dma_read_cmd_V_TREADY_int == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((tmp_reg_526_pp0_iter2_reg == 1'd1) & (m_axis_dma_write_cmd_V_TREADY_int == 1'b0)) | ((ap_predicate_op105_write_state4 == 1'b1) & (m_axis_dma_read_cmd_V_TREADY_int == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_m_axis_dma_read_cmd_V_U_apdone_blk == 1'b1) | (regslice_both_m_axis_dma_write_cmd_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_202 = ((tmp_1_reg_535 == 1'd0) & (tmp_reg_526 == 1'd0) & (tmp_2_reg_539 == 1'd1));
end

always @ (*) begin
    ap_condition_244 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_247 = ((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_4_fu_234_p3 == 1'd1) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_253 = ((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_4_fu_234_p3 == 1'd0) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_257 = ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_base_vaddr_V_loc_0_reg_193 = 'bx;

always @ (*) begin
    ap_predicate_op105_write_state4 = ((tmp_reg_526_pp0_iter2_reg == 1'd0) & (tmp_1_reg_535_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op12_read_state1 = ((tmp_1_nbreadreq_fu_102_p3 == 1'd0) & (tmp_2_nbreadreq_fu_110_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op19_read_state1 = ((tmp_1_nbreadreq_fu_102_p3 == 1'd1) & (tmp_nbreadreq_fu_94_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state3 = ((tmp_reg_526_pp0_iter1_reg == 1'd0) & (tmp_1_reg_535_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_202_p2 = (tlbMissCounter_V + 32'd1);

assign grp_fu_214_p2 = (tlbPageCrossingCount + 32'd1);

assign icmp_ln895_1_fu_452_p2 = ((ret_V_fu_446_p2 > 33'd2097152) ? 1'b1 : 1'b0);

assign icmp_ln895_2_fu_404_p2 = ((r_V_1_reg_568 > zext_ln895_1_fu_400_p1) ? 1'b1 : 1'b0);

assign icmp_ln895_3_fu_421_p2 = ((ret_V_1_fu_415_p2 > 33'd2097152) ? 1'b1 : 1'b0);

assign icmp_ln895_4_fu_374_p2 = ((r_V_2_fu_355_p4 > zext_ln895_2_fu_370_p1) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_435_p2 = ((r_V_reg_590 > zext_ln895_fu_431_p1) ? 1'b1 : 1'b0);

assign m_axis_dma_read_cmd_V_TDATA_int = $signed(tmp_3_fu_475_p3);

assign m_axis_dma_read_cmd_V_TVALID = regslice_both_m_axis_dma_read_cmd_V_U_vld_out;

assign m_axis_dma_write_cmd_V_TDATA_int = $signed(tmp_12_fu_504_p3);

assign m_axis_dma_write_cmd_V_TVALID = regslice_both_m_axis_dma_write_cmd_V_U_vld_out;

assign page_offset_V_1_fu_278_p1 = addr_V_1_fu_272_p2[20:0];

assign page_offset_V_fu_322_p1 = addr_V_fu_316_p2[20:0];

assign r_V_2_fu_355_p4 = {{addr_V_2_fu_350_p2[63:21]}};

assign r_V_6_fu_427_p1 = r_V_reg_590;

assign r_V_7_fu_396_p1 = r_V_1_reg_568;

assign r_V_8_fu_365_p1 = r_V_2_fu_355_p4;

assign regPageCrossingCount_V = (tlbPageCrossingCount + 32'd1);

assign regTlbMissCount_V = (tlbMissCounter_V + 32'd1);

assign ret_V_1_fu_415_p2 = (zext_ln215_2_fu_409_p1 + zext_ln215_3_fu_412_p1);

assign ret_V_fu_446_p2 = (zext_ln215_fu_440_p1 + zext_ln215_1_fu_443_p1);

assign tmp_12_fu_504_p3 = {{tmp_len_V_reg_596_pp0_iter1_reg}, {zext_ln78_1_fu_500_p1}};

assign tmp_1_nbreadreq_fu_102_p3 = s_axis_mem_read_cmd_V_TVALID;

assign tmp_2_nbreadreq_fu_110_p3 = s_axis_tlb_interface_V_TVALID;

assign tmp_3_fu_475_p3 = {{tmp_len_V_1_reg_574_pp0_iter1_reg}, {zext_ln78_3_fu_471_p1}};

assign tmp_4_fu_234_p3 = s_axis_tlb_interface_V_TDATA[32'd128];

assign tmp_addr_V_1_fu_465_p2 = (zext_ln78_2_fu_461_p1 + zext_ln214_1_fu_458_p1);

assign tmp_addr_V_fu_494_p2 = (zext_ln78_fu_490_p1 + zext_ln214_fu_487_p1);

assign tmp_nbreadreq_fu_94_p3 = s_axis_mem_write_cmd_V_TVALID;

assign trunc_ln321_1_fu_258_p1 = s_axis_mem_read_cmd_V_TDATA[63:0];

assign trunc_ln321_2_fu_230_p1 = s_axis_tlb_interface_V_TDATA[63:0];

assign trunc_ln321_fu_302_p1 = s_axis_mem_write_cmd_V_TDATA[63:0];

assign zext_ln214_1_fu_458_p1 = page_offset_V_1_reg_562_pp0_iter1_reg;

assign zext_ln214_fu_487_p1 = page_offset_V_reg_584_pp0_iter1_reg;

assign zext_ln215_1_fu_443_p1 = tmp_len_V_load_new_reg_579;

assign zext_ln215_2_fu_409_p1 = page_offset_V_1_reg_562;

assign zext_ln215_3_fu_412_p1 = tmp_len_V_2_load_new_reg_557;

assign zext_ln215_fu_440_p1 = page_offset_V_reg_584;

assign zext_ln78_1_fu_500_p1 = tmp_addr_V_fu_494_p2;

assign zext_ln78_2_fu_461_p1 = tlb_table_paddr_V_q0;

assign zext_ln78_3_fu_471_p1 = tmp_addr_V_1_fu_465_p2;

assign zext_ln78_fu_490_p1 = tlb_table_paddr_V_q0;

assign zext_ln895_1_fu_400_p1 = top_page_base_V;

assign zext_ln895_2_fu_370_p1 = top_page_base_V;

assign zext_ln895_fu_431_p1 = top_page_base_V;

endmodule //tlb
